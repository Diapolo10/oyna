[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[project]
version = "1.1.1"
name = "oyna"
requires-python = ">= 3.10"
dependencies = ["pynput>=1.7.7"]
authors = [{ name = "Kamyar M.G.", email = "kmgurmia@gmail.com" }]
maintainers = [{ name = "Kamyar M.G.", email = "kmgurmia@gmail.com" }]
description = "The Python Games Library for Playing and Learning."
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["games", "python", "alghorithms", "data structures", "fun", "OYNA"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "Topic :: File Formats :: JSON",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
dev = ["pre-commit", "ruff", "tox", "setuptools", "pynput"]

[project.urls]
Homepage = "https://github.com/kamyarmg/oyna"
Repository = "https://github.com/kamyarmg/oyna"
Issues = "https://github.com/kamyarmg/oyna/issues"
Changelog = "https://github.com/kamyarmg/oyna/blob/master/CHANGES.rst"

[project.scripts]
oyna = "oyna:main"

[tool.ruff]
output-format = "full"
show-fixes = true
fix = false

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.mypy]
show_error_codes = true
pretty = true
strict = true
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
        [tox:tox]
        isolated_build = true
        skip_missing_interpreters = true
        requires =
            tox>=4
        envlist = py3{13,12,11,10}

        [testenv]
        package = wheel
        wheel_build_env = .pkg
        use_frozen_constraints = true
        description = run unit tests - {envname}
        deps =
            .
        commands =
            python -m unittest discover -s tests --failfast

        [testenv:parallel_test]
        package = wheel
        wheel_build_env = .pkg
        use_frozen_constraints = true
        description = run unit tests - {envname}
        deps =
            .
            pytest
            pytest-xdist
            pytest-randomly
        commands =
            pytest {posargs:tests} -n 4


        [testenv:lint]
        description = run linters
        skip_install = true
        deps =
            ruff
        commands = ruff check {posargs:.}


        [testenv:format]
        description = run formatter
        skip_install = true
        deps =
            ruff
        commands = ruff format {posargs:.}


        [testenv:typecheck]
        description = run type checks
        skip_install = true
        deps =
            mypy

        commands =
            mypy {posargs:src tests}
"""
